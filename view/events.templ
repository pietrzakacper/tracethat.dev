package view

import "time"

import "fmt"
import "devtools-project/model"
import "encoding/json"
import "bitbucket.org/pcastools/hash"

templ Events(token, sessionId, instructionHtml string, hasEvents bool) {
	@layout() {
		<style>
			[x-cloak] { display: none !important; }
		</style>
		<div
 			x-cloak
 			x-data={ fmt.Sprintf("{ showInstruction: %t, eventsCount: 0  }", !hasEvents) }
 			x-effect="eventsCount == 1 ? (showInstruction = false) : null"
 			:class="{'mt-[-282px]': !showInstruction}"
 			class="flex flex-col w-full py-4 px-6 md:px-12 lg:px-24 drawer transition-[margin-top] duration-[1s] ease-[ease-in-out]"
		>
			<div class="relative w-full mb-6 shadow-lg">
				<style> pre { border: 2px solid black; border-radius: 0.5rem; }</style>
				@templ.Raw(instructionHtml)
				<div
 					x-on:click="showInstruction = !showInstruction"
 					x-text="showInstruction ? 'hide instruction' : 'show instruction'"
 					class="absolute opacity-40 bg-gray-500 w-full cursor-pointer text-center text-white p-px bottom-0 hover:opacity-70 rounded-t-none rounded-lg"
				>close instruction</div>
			</div>
			<div
 				x-data="{ selectedEvt: null }"
 				class="w-full flex flex-col md:flex-row"
			>
				<div class="shadow-lg rounded-lg flex-1 overflow-x-auto h-[calc(100vh-5rem)] border-2 border-solid border-[black]">
					<style>
						tbody:empty {
							position: relative;
						}

						tbody:empty::before {
							content: "No events yet";
							display: block;
							text-align: center;
							padding: 1rem;
							color: #999;
							position: absolute;
							font-size: 16px;
							top: 20vh;
							left: 50%;
							transform: translateX(-50%);
						}
					</style>
					<table class="table table-pin-rows">
						<thead>
							<tr>
								<th>Name</th>
								<td>Duration</td>
								<td>Start</td>
								<td>End</td>
							</tr>
						</thead>
						<tbody
 							hx-ext="sse"
 							sse-connect={ fmt.Sprintf("/events?token=%s&sessionId=%s", token, sessionId) }
 							sse-swap="message"
 							hx-swap="beforeend"
						></tbody>
					</table>
				</div>
				<div
 					x-show="!!selectedEvt"
 					class="shadow-lg rounded-lg flex-1 ml-0 md:ml-6 mt-6 md:mt-0 p-6 h-[calc(100vh-5rem)] border-2 border-solid border-[black]"
				>
					<header class="flex flex-wrap gap-2" x-html="window.renderHeader(selectedEvt)"></header>
					<div class="border-b border-gray-200 my-4"></div>
					<div
 						x-effect="selectedEvt && renderJsonTree(selectedEvt)"
 						id="json-tree"
 						class="py-4 px-6 rounded-lg overflow-auto h-[calc(100vh-16rem)]"
					></div>
				</div>
			</div>
		</div>
	}
}

func timeWithMs(epochMs int) string {
	return time.UnixMilli(int64(epochMs)).Format("15:04:05.000")
}

func durationAsSeconds(startEpochMs, endEpochMs int) string {
	durationMs := (endEpochMs - startEpochMs)
	return fmt.Sprintf("%.3fs", float64(durationMs)/1000)
}

func toJSON(e model.Event) string {
	val, _ := json.Marshal(e)
	return string(val)
}

var bgColors = [...]string{
	"bg-blue-100",
	"bg-green-100",
	"bg-red-100",
	"bg-purple-100",
	"bg-pink-100",
	"bg-indigo-100",
	"bg-gray-100",
	"bg-blue-200",
	"bg-green-200",
	"bg-red-200",
	"bg-purple-200",
	"bg-pink-200",
	"bg-indigo-200",
	"bg-gray-200",
	"bg-blue-300",
	"bg-green-300",
	"bg-red-300",
	"bg-purple-300",
	"bg-pink-300",
	"bg-indigo-300",
	"bg-gray-300",
	"bg-blue-400",
	"bg-green-400",
	"bg-red-400",
	"bg-purple-400",
	"bg-pink-400",
	"bg-indigo-400",
	"bg-gray-400",
}

func bgColor(s string) string {
	color := bgColors[int(hash.String(s))%len(bgColors)]

	return fmt.Sprintf("%s hover:%s/50", color, color)
}

templ Event(e model.Event) {
	<tr
 		x-init="eventsCount = eventsCount + 1"
 		@click={ fmt.Sprintf("selectedEvt = JSON.parse('%s')", toJSON(e)) }
 		id={ e.CallId }
 		bgColor={ bgColor(e.Name) }
 		class={ "border-b transition-colors cursor-pointer w-full", bgColor(e.Name) }
	>
		<th id="name" class="p-4 align-middle font-medium whitespace-nowrap">{ e.Name }</th>
		<td id="duration" class="p-4 align-middle tabular-nums">{ durationAsSeconds(e.StartEpochMs, e.EndEpochMs) }</td>
		<td id="start" class="p-4 align-middle">{ timeWithMs(e.StartEpochMs) }</td>
		<td id="end" class="p-4 align-middle">{ timeWithMs(e.EndEpochMs) }</td>
	</tr>
}
